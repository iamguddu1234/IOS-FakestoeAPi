import Foundation
import Combine

class UserViewModel: ObservableObject {
    
    @Published var users: [User] = []          // Users data
    @Published var isLoading = false           // Loading state
    @Published var errorMessage: String?       // Error message if any
    @Published var successMessage: String?     // Success message when user is added
    
    private var cancellables = Set<AnyCancellable>()
    
    // Fetch all users
    func getAllUser() {
        guard let url = URL(string: "https://fakestoreapi.in/api/users") else {
            self.errorMessage = "Invalid URL"
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        URLSession.shared.dataTaskPublisher(for: url)
            .map { $0.data }
            .decode(type: UserResponse.self, decoder: JSONDecoder())
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    break
                case .failure(let error):
                    DispatchQueue.main.async {
                        self.errorMessage = "Failed to load users: \(error.localizedDescription)"
                        self.isLoading = false
                    }
                }
            }, receiveValue: { response in
                DispatchQueue.main.async {
                    if let users = response.users {
                        self.users = users
                    } else {
                        self.errorMessage = "No users found."
                    }
                    self.isLoading = false
                }
            })
            .store(in: &cancellables)
    }
    
    // Fetch limited users
    func showLimitedUser(withLimit limit: Int) {
        let urlString = "https://fakestoreapi.in/api/users?limit=\(limit)"
        
        guard let url = URL(string: urlString) else {
            self.errorMessage = "Invalid URL"
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        URLSession.shared.dataTaskPublisher(for: url)
            .map { $0.data }
            .decode(type: UserResponse.self, decoder: JSONDecoder())
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    break
                case .failure(let error):
                    DispatchQueue.main.async {
                        self.errorMessage = "Failed to fetch users: \(error.localizedDescription)"
                        self.isLoading = false
                    }
                }
            }, receiveValue: { userResponse in
                DispatchQueue.main.async {
                    // Handle the response properly based on the 'users' field
                    if let users = userResponse.users {
                        self.users = users
                    } else {
                        self.errorMessage = "No users found or error in response."
                    }
                    self.isLoading = false
                }
            })
            .store(in: &cancellables)
    }
    
    // Add new user
    func addUser(email: String, username: String, password: String, firstname: String, lastname: String, city: String, street: String, number: String, zipcode: String, lat: Double, long: Double, phone: String) {
        
        guard let url = URL(string: "https://fakestoreapi.in/api/users") else {
            self.errorMessage = "Invalid URL"
            return
        }
        
        // Create the new user object, omit `id` as it's generated by the server
        let newUser = User(
            id: 0,  // ID is auto-generated by the server, so it's safe to set to 0 or omit
            email: email,
            username: username,
            password: password,
            name: Name(firstname: firstname, lastname: lastname),
            address: Address(
                city: city,
                street: street,
                number: number,
                zipcode: zipcode,
                geolocation: Geolocation(lat: lat, long: long)
            ),
            phone: phone
        )
        
        // Encode user data to JSON
        guard let jsonData = try? JSONEncoder().encode(newUser) else {
            self.errorMessage = "Failed to encode user data"
            return
        }
        
        // Setup the URLRequest for POST request
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = jsonData
        
        // Start loading
        isLoading = true
        errorMessage = nil
        successMessage = nil
        
        // Make the network request
        URLSession.shared.dataTaskPublisher(for: request)
            .map { $0.data }
            .decode(type: UserResponse.self, decoder: JSONDecoder())
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    break
                case .failure(let error):
                    DispatchQueue.main.async {
                        self.errorMessage = "Failed to add user: \(error.localizedDescription)"
                        self.isLoading = false
                    }
                }
            }, receiveValue: { response in
                DispatchQueue.main.async {
                    // Check the response status
                    if response.status == "SUCCESS" {
                        self.successMessage = response.message
                    } else {
                        self.errorMessage = response.message
                    }
                    self.isLoading = false
                }
            })
            .store(in: &cancellables) // Ensure to store the subscription
    }
    
    
    
    // Update user function
    func updateUser(id: Int, email: String, username: String, password: String, firstname: String, lastname: String, city: String, street: String, number: String, zipcode: String, lat: Double, long: Double, phone: String) {
        
        guard let url = URL(string: "https://fakestoreapi.in/api/users/\(id)") else {
            self.errorMessage = "Invalid URL"
            return
        }
        
        let updatedUser = User(
            id: id,
            email: email,
            username: username,
            password: password,
            name: Name(firstname: firstname, lastname: lastname),
            address: Address(
                city: city,
                street: street,
                number: number,
                zipcode: zipcode,
                geolocation: Geolocation(lat: lat, long: long)
            ),
            phone: phone
        )
        
        guard let jsonData = try? JSONEncoder().encode(updatedUser) else {
            self.errorMessage = "Failed to encode user data"
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PUT"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = jsonData
        
        isLoading = true
        errorMessage = nil
        successMessage = nil
        
        URLSession.shared.dataTaskPublisher(for: request)
            .map { $0.data }
            .decode(type: UserResponse.self, decoder: JSONDecoder())
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    break
                case .failure(let error):
                    DispatchQueue.main.async {
                        self.errorMessage = "Failed to update user: \(error.localizedDescription)"
                        self.isLoading = false
                    }
                }
            }, receiveValue: { response in
                DispatchQueue.main.async {
                    if response.status == "SUCCESS" {
                        self.successMessage = response.message
                    } else {
                        self.errorMessage = response.message
                    }
                    self.isLoading = false
                }
            })
            .store(in: &cancellables)
    }

    
    // Delete user
    func deleteUser(userId: Int) {
        guard let url = URL(string: "https://fakestoreapi.in/api/users/\(userId)") else {
            self.errorMessage = "Invalid URL"
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        
        // Start loading
        isLoading = true
        errorMessage = nil
        successMessage = nil
        
        // Make the DELETE request
        URLSession.shared.dataTaskPublisher(for: request)
            .map { $0.data }
            .decode(type: UserResponse.self, decoder: JSONDecoder())
            .sink(receiveCompletion: { completion in
                switch completion {
                case .finished:
                    break
                case .failure(let error):
                    DispatchQueue.main.async {
                        self.errorMessage = "Failed to delete user: \(error.localizedDescription)"
                        self.isLoading = false
                    }
                }
            }, receiveValue: { response in
                DispatchQueue.main.async {
                    // Check the response status
                    if response.status == "SUCCESS" {
                        self.successMessage = "User deleted successfully"
                        // Update the user list after deletion
                        self.users.removeAll { $0.id == userId }
                    } else {
                        self.errorMessage = response.message
                    }
                    self.isLoading = false
                }
            })
            .store(in: &cancellables) // Ensure to store the subscription
    }
    
    
    
}
